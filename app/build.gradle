apply plugin: 'com.android.application'

android {
    //编译版本
    compileSdkVersion COMPILE_SDK_VERSION as int
    //Build Tool Version
    buildToolsVersion BUILD_TOOLS_VERSION
    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //关闭检索的功能
        disable 'GoogleAppIndexingWarning'
    }
    //签名配置,自定义,用在defaultConfig中
    signingConfigs {
        debug {
            storeFile file(STORE_DEBUG_FILE)
        }
        release {
            storeFile file(STORE_RELEASE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }
    //默认配置
    defaultConfig {
        applicationId "com.huyingbao.simple"
        multiDexEnabled true//支持Multidex分包
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode rootProject.gitGitVersionCode()
        versionName rootProject.getGitVersionName()
        signingConfig signingConfigs.debug
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true//使用vector图片
    }
    //构建过程
    buildTypes {
        //自定义buildType.name
        debug {
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
        }
        //自定义buildType.name
        release {
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
        }
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all {
            if ("release".equals(variant.buildType.name))
                outputFileName = "dm_v_" + variant.buildType.name + "_" + getGitVersionName() + '.apk'
        }
    }

    //数据绑定
    dataBinding {
        enabled = true
    }

    //Dex分包
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"//增加java堆内存大小
    }
    //Lambda表达式需要
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //单元测试
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation "junit:junit:${TEST_JUNIT}"
    testImplementation "org.mockito:mockito-core:${TEST_MOCKITO}"
    testImplementation "org.robolectric:robolectric:${TEST_ROBOLECTRIC}"
    testImplementation "org.robolectric:shadows-multidex:${TEST_ROBOLECTRIC}"
    testImplementation "org.robolectric:shadows-supportv4:${TEST_ROBOLECTRIC}"
    testImplementation "com.github.fabioCollini.daggermock:daggermock:${TEST_DEAAGE_MOCK}"

    androidTestImplementation "org.mockito:mockito-android:${TEST_MOCKITO}"
    androidTestImplementation "com.android.support.test:runner:${TEST_RUNNER}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${TEST_ESPRESSO}"

    //Support Libs
    implementation "com.android.support:support-v4:${SUPPORT_VERSION}"
    implementation "com.android.support:support-v13:${SUPPORT_VERSION}"
    implementation "com.android.support:appcompat-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:design:${SUPPORT_VERSION}"
    implementation "com.android.support:recyclerview-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:gridlayout-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:cardview-v7:${SUPPORT_VERSION}"
    implementation "com.android.support:support-annotations:${SUPPORT_VERSION}"
    implementation "com.android.support:support-vector-drawable:${SUPPORT_VERSION}"

    //MultiDex分包
    implementation "com.android.support:multidex:${MULTIDEX}"

    //Dagger2
    implementation "com.google.dagger:dagger:${DAGGER}"
    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"

    //网络Retrofit
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT}"
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${RETROFIT}"

    //网络OkHttp,OkIo
    implementation "com.squareup.okio:okio:${OKIO}"
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP}"

    //ButterKnife,view注解,string注解,drawable注解
    implementation "com.jakewharton:butterknife:${BUTTER_KNIFE}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTER_KNIFE}"

    //RxPermissions
    implementation "com.github.tbruyelle:rxpermissions:${RX_PERMISSIONS_2}"
    implementation "io.reactivex.rxjava2:rxjava:${RX_JAVA_2}"
    implementation "io.reactivex.rxjava2:rxandroid:${RX_ANDROID_2}"
    //RxLifecycle
    implementation "com.trello.rxlifecycle2:rxlifecycle:${RX_LIFE_CYCLE_2}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:${RX_LIFE_CYCLE_2}"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:${RX_LIFE_CYCLE_2}"

    //RecyclerView Adapter
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"

    //Logger
    implementation "com.orhanobut:logger:${ORHANOBUT_LOGGER}"

    //Json
    implementation "com.alibaba:fastjson:${FAST_JSON}"
    implementation "com.google.code.gson:gson:${GSON}"

    //内存溢出
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"

    //RxFlux2
    implementation project(':rxflux2')
}