apply plugin: 'com.android.application'

/**
 * release apk name
 */
def releaseName = "demo_v" + APP_VERSION_NAME + "_${releaseTime()}_release.apk"

/**
 * debug apk name
 */
def debugName = "demo_v" + APP_VERSION_NAME + "_debug.apk"

/**
 * 输出目录
 */
def mOutputs = "$rootDir/outputs/build_" + APP_VERSION_NAME

/**
 * release时间
 * @return
 */
def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

/**
 * 获取local本地配置文件
 * @return
 */
def getlocalProperty() {
    def Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('../local.properties')))
    return buildProps;
}

/**
 * 读取Git日志
 * @return
 */
def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

/**
 * 读取Svn日志
 * @return
 */
def getSvnVersion() {
    return 'svn log -r HEAD'.execute().text.trim()
}

/**
 * 输出日志
 */
def buildLog() {
    File outputFile = new File("$rootDir/outputs/build_" + APP_VERSION_NAME)
    if (!outputFile.exists()) outputFile.mkdirs()
    FileWriter fw = new FileWriter("$rootDir/outputs/build_" + APP_VERSION_NAME + File.separator + "log.txt")
    StringBuilder builder = new StringBuilder()
    builder.append("[构建时间]=" + new Date().format("yyyy/MM/dd HH:mm", TimeZone.getTimeZone("GMT+08:00")))
    builder.append("\r\n")
    builder.append("[版本编号]=" + APP_VERSION_CODE)
    builder.append("\r\n")
    builder.append("[版本名称]=" + APP_VERSION_NAME)
    builder.append("\r\n")
    builder.append("[提交记录]=" + getGitVersion())
    fw.write(builder.toString())
    fw.flush()
    fw.close()
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION

    //lint设置
    lintOptions {
        //lint 不被终止
        abortOnError false
        //打Release版本时,不进行检测
        checkReleaseBuilds false
        //FlowUp
        //disable 'InvalidPackage'
    }
    //签名配置,自定义,用在defaultConfig中
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
        }
        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }
    //默认配置
    defaultConfig {
        applicationId "com.huyingbao.demo"
        multiDexEnabled true//支持multidex分包
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode APP_VERSION_CODE as int
        versionName APP_VERSION_NAME
        signingConfig signingConfigs.debug
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk { abiFilters "arm64-v8a", "armeabi", "armeabi-v7a" }//配置ndk
    }
    //构建过程
    buildTypes {
        //自定义buildType.name
        debug {
            //显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //混淆开关
            minifyEnabled false
            //混淆文件
            proguardFile 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
        }
        //自定义buildType.name
        release {
            //不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆开关
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            //混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
        }
    }

    //gradle 4
    applicationVariants.all { variant ->
        variant.outputs.all {
            if ("release".equals(variant.buildType.name))
                outputFileName = "dm_v" + APP_VERSION_NAME + "_" + variant.buildType.name + '.apk'
        }
    }

    //数据绑定
    dataBinding {
        enabled = true
    }

    //dex分包
    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"//增加java堆内存大小
    }
    //retrolambda表达式需要
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//仓库
repositories {
    //本地仓库,添加aar支持
    flatDir { dirs 'libs' }
    //hotfix 阿里云仓库
    maven { url "http://maven.aliyun.com/nexus/content/repositories/releases" }
}

dependencies {
    compile project(':rxflux')
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile "junit:junit:${TEST_VERSION}"
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })

    //Support Libs
    compile "com.android.support:support-v4:${SUPPORT_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_VERSION}"
    compile "com.android.support:design:${SUPPORT_VERSION}"
    compile "com.android.support:recyclerview-v7:${SUPPORT_VERSION}"
    compile "com.android.support:gridlayout-v7:${SUPPORT_VERSION}"
    compile "com.android.support:cardview-v7:${SUPPORT_VERSION}"
    compile "com.android.support:support-annotations:${SUPPORT_VERSION}"
    compile "com.android.support.constraint:constraint-layout:${CONSTRAINT}"

    //Multidex分包
    compile "com.android.support:multidex:${MULTIDEX}"

    //Dagger2
    compile "com.google.dagger:dagger:${DAGGER}"
    annotationProcessor "com.google.dagger:dagger-compiler:${DAGGER}"

    //网络Retrofit,okhttp,okio
    compile "com.squareup.retrofit2:retrofit:${RETROFIT}"
    compile "com.squareup.retrofit2:converter-gson:${RETROFIT}"
    compile "com.squareup.retrofit2:adapter-rxjava:${RETROFIT}"
    compile "com.squareup.okhttp3:okhttp:${OKHTTP}"
    compile "com.squareup.okio:okio:${OKIO}"

    //数据库缓存
    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${DBFLOW}"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${DBFLOW}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${DBFLOW}"
    compile "com.snappydb:snappydb-lib:${SNAPPY_DB}"
    compile "com.esotericsoftware.kryo:kryo:${KRYO}"

    //图片加载,图片加载使用okhttp
    compile "com.github.bumptech.glide:glide:${GLIDE}"
    compile "com.github.bumptech.glide:okhttp3-integration:${GLIDE}"
    annotationProcessor "com.github.bumptech.glide:compiler:${GLIDE}"

    //ButterKnife,view注解,string注解,drawable注解
    compile "com.jakewharton:butterknife:${BUTTER_KNIFE}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${BUTTER_KNIFE}"

    //RxPermissions
    compile "com.tbruyelle.rxpermissions:rxpermissions:${RX_PERMISSIONS}"
    //RxBinding
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:${RX_BINDING}"
    //RxLifecycle
    compile "com.trello:rxlifecycle:${RX_LIFE_CYCLE}"
    compile "com.trello:rxlifecycle-components:${RX_LIFE_CYCLE}"

    //RecyclerView Adapter
    compile "com.github.CymChad:BaseRecyclerViewAdapterHelper:${BASE_RECYCLERVIEW_ADAPTER_HELPER}"
    //分割线
    compile "com.yqritc:recyclerview-flexibledivider:${FLEXIBLE_DIVIDER}"

    //Logger
    compile "com.orhanobut:logger:${ORHANOBUT_LOGGER}"
    //Fastjson
    compile "com.alibaba:fastjson:${FAST_JSON}"
    //common lang 常用工具类
    compile "org.apache.commons:commons-lang3:${COMMONS_LANG3}"

    //内存溢出
    debugCompile "com.squareup.leakcanary:leakcanary-android:${LEAK_CANARY}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${LEAK_CANARY}"
}
